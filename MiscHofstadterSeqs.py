# Miscellaneous number sequences discussed by Douglas Hofstadter
# See his correspondence with Neil Sloane (a006336.pdf) or
# "Gödel, Escher, Bach: an Eternal Golden Braid".

# G(0) = 0
# G(n) = n - G(G(n-1))
# GEB, pg. 137
# https://oeis.org/A005206
def makeG(maxidx, printMapping = False):
    G = [0]
    for i in range(1,maxidx+1):
        G.append(i - G[G[i-1]])
        if printMapping: print i, G[i]
    return G

# H(0) = 0
# H(n) = n - H(H(H(n-1)))
# GEB, pg. 137
# https://oeis.org/A005374
def makeH(maxidx, printMapping = False):
    H = [0]
    for i in range(1,maxidx+1):
        H.append(i - H[H[H[i-1]]])
        if printMapping: print i, H[i]
    return H

# The right-hand side sequence of the tree whose
# "fork function" is eta(3/2). See correspondence.
# https://oeis.org/A006999
# *** Also generated by the infinite Adar program
#  (0, 1), (-2, 1), (-4, 1), (-6, 1), (-8, 1), (-10, 1), ...
def makeA6999(numterms):
    a = [0]
    for i in range(1,numterms):
        a.append(int((3*a[i-1]+2)/2))
    return a

# As Hofstadter points out, the pattern of parities in the above
# sequence is quite interesting.  (I haven't yet figured out the
# pattern!)
# pars = map(lambda n: n%2, makeA6999(300))

def runlengths(seq, val):
    count = 0
    runs = []
    for e in seq:
        if e == val:
            count += 1
        else:
            runs.append(count)
            count = 0
    return runs

# filter(bool, runlengths(pars, 1))
# filter(bool, runlengths(pars, 0))
