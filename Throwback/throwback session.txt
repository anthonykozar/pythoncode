== RESTART: /Volumes/iMacSystem/Users/anthony/Projects/python/throwback.py ==
>>> leaders = makeleadersequence(100000)
>>> len(leaders)
100001
>>> Nindices = [FindAllIndices(i, leaders) for i in xrange(41)]
>>> firstindices = map(lambda x: x[0], Nindices[4:])
>>> firstindices
[1, 2, 3, 5, 7, 10, 14, 19, 26, 35, 47, 63, 85, 114, 153, 205, 274, 366, 489, 653, 871, 1162, 1550, 2067, 2757, 3677, 4903, 6538, 8718, 11625, 15501, 20669, 27559, 36746, 48995, 65327, 87103]
>>> len(firstindices)
37
>>> for a in Nindices[3:]:
	print a[:20]

[0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76]
[1, 6, 11, 17, 22, 27, 33, 38, 43, 49, 54, 59, 65, 70, 75, 81, 86, 91, 97, 102]
[2, 9, 15, 23, 30, 37, 45, 51, 58, 66, 73, 79, 87, 94, 101, 109, 115, 122, 130, 137]
[3, 13, 21, 31, 41, 50, 61, 69, 78, 89, 98, 106, 117, 126, 135, 146, 154, 163, 174, 183]
[5, 18, 29, 42, 55, 67, 82, 93, 105, 119, 131, 142, 157, 169, 181, 195, 206, 218, 233, 245]
[7, 25, 39, 57, 74, 90, 110, 125, 141, 159, 175, 190, 210, 226, 242, 261, 275, 291, 311, 327]
[10, 34, 53, 77, 99, 121, 147, 167, 189, 213, 234, 254, 281, 302, 323, 349, 367, 389, 415, 437]
[14, 46, 71, 103, 133, 162, 197, 223, 253, 285, 313, 339, 375, 403, 431, 466, 490, 519, 554, 583]
[19, 62, 95, 138, 178, 217, 263, 298, 338, 381, 418, 453, 501, 538, 575, 622, 654, 693, 739, 778]
[26, 83, 127, 185, 238, 290, 351, 398, 451, 509, 558, 605, 669, 718, 767, 830, 873, 925, 986, 1038]
[35, 111, 170, 247, 318, 387, 469, 531, 602, 679, 745, 807, 893, 958, 1023, 1107, 1165, 1234, 1315, 1385]
[47, 149, 227, 330, 425, 517, 626, 709, 803, 906, 994, 1077, 1191, 1278, 1365, 1477, 1554, 1646, 1754, 1847]
[63, 199, 303, 441, 567, 690, 835, 946, 1071, 1209, 1326, 1437, 1589, 1705, 1821, 1970, 2073, 2195, 2339, 2463]
[85, 266, 405, 589, 757, 921, 1114, 1262, 1429, 1613, 1769, 1917, 2119, 2274, 2429, 2627, 2765, 2927, 3119, 3285]
[114, 355, 541, 786, 1010, 1229, 1486, 1683, 1906, 2151, 2359, 2557, 2826, 3033, 3239, 3503, 3687, 3903, 4159, 4381]
[153, 474, 722, 1049, 1347, 1639, 1982, 2245, 2542, 2869, 3146, 3410, 3769, 4045, 4319, 4671, 4917, 5205, 5546, 5842]
[205, 633, 963, 1399, 1797, 2186, 2643, 2994, 3390, 3826, 4195, 4547, 5026, 5394, 5759, 6229, 6557, 6941, 7395, 7790]
[274, 845, 1285, 1866, 2397, 2915, 3525, 3993, 4521, 5102, 5594, 6063, 6702, 7193, 7679, 8306, 8743, 9255, 9861, 10387]
[366, 1127, 1714, 2489, 3197, 3887, 4701, 5325, 6029, 6803, 7459, 8085, 8937, 9591, 10239, 11075, 11658, 12341, 13149, 13850]
[489, 1503, 2286, 3319, 4263, 5183, 6269, 7101, 8039, 9071, 9946, 10781, 11917, 12789, 13653, 14767, 15545, 16455, 17533, 18467]
[653, 2005, 3049, 4426, 5685, 6911, 8359, 9469, 10719, 12095, 13262, 14375, 15890, 17053, 18205, 19690, 20727, 21941, 23378, 24623]
[871, 2674, 4066, 5902, 7581, 9215, 11146, 12626, 14293, 16127, 17683, 19167, 21187, 22738, 24274, 26254, 27637, 29255, 31171, 32831]
[1162, 3566, 5422, 7870, 10109, 12287, 14862, 16835, 19058, 21503, 23578, 25557, 28250, 30318, 32366, 35006, 36850, 39007, 41562, 43775]
[1550, 4755, 7230, 10494, 13479, 16383, 19817, 22447, 25411, 28671, 31438, 34077, 37667, 40425, 43155, 46675, 49134, 52010, 55417, 58367]
[2067, 6341, 9641, 13993, 17973, 21845, 26423, 29930, 33882, 38229, 41918, 45437, 50223, 53901, 57541, 62234, 65513, 69347, 73890, 77823]
[2757, 8455, 12855, 18658, 23965, 29127, 35231, 39907, 45177, 50973, 55891, 60583, 66965, 71869, 76722, 82979, 87351, 92463, 98521]
[3677, 11274, 17141, 24878, 31954, 38837, 46975, 53210, 60237, 67965, 74522, 80778, 89287, 95826]
[4903, 15033, 22855, 33171, 42606, 51783, 62634, 70947, 80317, 90621, 99363]
[6538, 20045, 30474, 44229, 56809, 69045, 83513, 94597]
[8718, 26727, 40633, 58973, 75746, 92061]
[11625, 35637, 54178, 78631]
[15501, 47517, 72238]
[20669, 63357, 96318]
[27559, 84477]
[36746]
[48995]
[65327]
[87103]
>>> def FirstDiffs(seq, includeFirstTerm = False):
    diffs = [seq[i] - seq[i-1] for i in range(1,len(seq))]
    if includeFirstTerm:
        diffs = seq[0:1] + diffs
    return diffs

>>> for a in Nindices[3:]:
	print FirstDiffs(a[:20])

[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5]
[7, 6, 8, 7, 7, 8, 6, 7, 8, 7, 6, 8, 7, 7, 8, 6, 7, 8, 7]
[10, 8, 10, 10, 9, 11, 8, 9, 11, 9, 8, 11, 9, 9, 11, 8, 9, 11, 9]
[13, 11, 13, 13, 12, 15, 11, 12, 14, 12, 11, 15, 12, 12, 14, 11, 12, 15, 12]
[18, 14, 18, 17, 16, 20, 15, 16, 18, 16, 15, 20, 16, 16, 19, 14, 16, 20, 16]
[24, 19, 24, 22, 22, 26, 20, 22, 24, 21, 20, 27, 21, 21, 26, 18, 22, 26, 22]
[32, 25, 32, 30, 29, 35, 26, 30, 32, 28, 26, 36, 28, 28, 35, 24, 29, 35, 29]
[43, 33, 43, 40, 39, 46, 35, 40, 43, 37, 35, 48, 37, 37, 47, 32, 39, 46, 39]
[57, 44, 58, 53, 52, 61, 47, 53, 58, 49, 47, 64, 49, 49, 63, 43, 52, 61, 52]
[76, 59, 77, 71, 69, 82, 62, 71, 77, 66, 62, 86, 65, 65, 84, 58, 69, 81, 70]
[102, 78, 103, 95, 92, 109, 83, 94, 103, 88, 83, 114, 87, 87, 112, 77, 92, 108, 93]
[136, 104, 138, 126, 123, 145, 111, 125, 138, 117, 111, 152, 116, 116, 149, 103, 122, 144, 124]
[181, 139, 184, 168, 164, 193, 148, 167, 184, 156, 148, 202, 155, 155, 198, 138, 162, 192, 166]
[241, 186, 245, 224, 219, 257, 197, 223, 245, 208, 198, 269, 207, 206, 264, 184, 216, 256, 222]
[321, 248, 327, 298, 292, 343, 263, 297, 327, 277, 264, 359, 276, 274, 352, 246, 288, 341, 296]
[428, 330, 436, 398, 389, 457, 351, 396, 436, 369, 352, 479, 368, 365, 470, 328, 384, 454, 395]
[571, 440, 581, 531, 518, 610, 468, 528, 581, 492, 469, 639, 491, 486, 627, 437, 512, 606, 526]
[761, 587, 775, 708, 690, 814, 624, 704, 774, 656, 626, 852, 654, 648, 836, 583, 683, 808, 701]
[1014, 783, 1033, 944, 920, 1086, 832, 938, 1032, 875, 835, 1136, 872, 864, 1114, 778, 910, 1078, 934]
[1352, 1044, 1377, 1259, 1226, 1448, 1110, 1250, 1376, 1167, 1113, 1515, 1163, 1152, 1485, 1037, 1214, 1437, 1245]
[1803, 1392, 1836, 1679, 1634, 1931, 1480, 1667, 1834, 1556, 1484, 2020, 1551, 1536, 1980, 1383, 1618, 1916, 1660]
[2404, 1856, 2448, 2239, 2178, 2575, 1973, 2223, 2445, 2075, 1979, 2693, 2068, 2048, 2640, 1844, 2157, 2555, 2213]
[3205, 2475, 3264, 2985, 2904, 3434, 2630, 2964, 3260, 2767, 2639, 3590, 2758, 2730, 3520, 2459, 2876, 3407, 2950]
[4274, 3300, 4352, 3980, 3872, 4578, 3507, 3952, 4347, 3689, 3519, 4786, 3678, 3640, 4693, 3279, 3834, 4543, 3933]
[5698, 4400, 5803, 5307, 5162, 6104, 4676, 5270, 5796, 4918, 4692, 6382, 4904, 4853, 6257, 4372, 5112, 6058]
[7597, 5867, 7737, 7076, 6883, 8138, 6235, 7027, 7728, 6557, 6256, 8509, 6539]
[10130, 7822, 10316, 9435, 9177, 10851, 8313, 9370, 10304, 8742]
[13507, 10429, 13755, 12580, 12236, 14468, 11084]
[18009, 13906, 18340, 16773, 16315]
[24012, 18541, 24453]
[32016, 24721]
[42688, 32961]
[56918]
[]
[]
[]
[]
>>> Nidxdiffs = map(FirstDiffs, Nindices)
>>> map(len, Nidxdiffs)
[0, 0, 0, 25000, 18749, 14062, 10546, 7909, 5932, 4449, 3336, 2502, 1876, 1407, 1055, 791, 593, 444, 333, 250, 187, 140, 105, 78, 58, 44, 32, 24, 18, 13, 10, 7, 5, 3, 2, 2, 1, 0, 0, 0, 0]
>>> def PrintInColumns(seq, columns = 9):
    count = 0
    for a in seq:
        print a,
        count += 1
        if count == columns:
            print
            count = 0
    print "\n"

>>> PrintInColumns(Nidxdiffs[4][:81], 27)
5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6
5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6
5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6 5 5 6


>>> PrintInColumns(Nidxdiffs[5][:81], 27)
7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8
7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8
7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8 7 6 8 7 7 8 6 7 8


>>> PrintInColumns(Nidxdiffs[6][:243], 27)
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11 9 8 11 9 9 11 8 9 11 9 8 11 9 10 10 8 10 10


>>> PrintInColumns(Nidxdiffs[6][:81], 9)
10 8 10 10 9 11 8 9 11
9 8 11 9 9 11 8 9 11
9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11
9 8 11 9 9 11 8 9 11
9 8 11 9 10 10 8 10 10
10 8 10 10 9 11 8 9 11
9 8 11 9 9 11 8 9 11
9 8 11 9 10 10 8 10 10


>>> print "%5d %5d %5d" % (5, 100, 10000)
    5   100 10000
>>> print "%-5d %-5d %-5d" % (5, 100, 10000)
5     100   10000
>>> print "%-*d %-*d %-*d" % (2, 5, 4, 100, 6, 10000)
5  100  10000 
>>> print "%-*d %-*d %-*d" % (10, 5, 5, 100, 5, 10000)
5          100   10000
>>> def PrintInColumns(seq, columns = 9, colwidth = 3):
    count = 0
    for a in seq:
        print "%-*d" % (colwidth, a),
        count += 1
        if count == columns:
            print
            count = 0
    print "\n"

>>> PrintInColumns(Nidxdiffs[6][:81], 9)
10  8   10  10  9   11  8   9   11 
9   8   11  9   9   11  8   9   11 
9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11 
9   8   11  9   9   11  8   9   11 
9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11 
9   8   11  9   9   11  8   9   11 
9   8   11  9   10  10  8   10  10 


>>> PrintInColumns(Nidxdiffs[5][:81], 9)
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  


>>> PrintInColumns(Nidxdiffs[5][:27], 3)
7   6   8  
7   7   8  
6   7   8  
7   6   8  
7   7   8  
6   7   8  
7   6   8  
7   7   8  
6   7   8  


>>> PrintInColumns(Nidxdiffs[7][:729], 81)
13  11  13  13  12  15  11  12  14  12  11  15  12  12  14  11  12  15  12  10  15  12  13  14  10  14  13  13  11  13  14  12  14  11  12  15  12  10  15  12  12  15  10  12  15  12  11  14  12  14  13  11  13  13  14  10  14  13  12  15  10  12  15  12  11  14  12  12  15  11  12  14  12  11  15  12  13  13  11  13  14 
13  11  13  13  12  15  11  12  14  12  11  15  12  12  14  11  12  15  12  10  15  12  13  14  10  14  13  13  11  13  14  12  14  11  12  15  12  10  15  12  12  15  10  12  15  12  11  14  12  14  13  11  13  13  14  10  14  13  12  15  10  12  15  12  11  14  12  12  15  11  12  14  12  11  15  12  13  13  11  13  14 
13  11  13  13  12  15  11  12  14  12  11  15  12  12  14  11  12  15  12  10  15  12  13  14  10  14  13  13  11  13  14  12  14  11  12  15  12  10  15  12  12  15  10  12  15  12  11  14  12  14  13  11  13  13  14  10  14  13  12  15  10  12  15  12  11  14  12  12  15  11  12  14  12  11  15  12  13  13  11  13  14 
13  11  13  13  12  15  11  12  14  12  11  15  12  12  14  11  12  15  12  10  15  12  13  14  10  14  13  13  11  13  14  12  14  11  12  15  12  10  15  12  12  15  10  12  15  12  11  14  12  14  13  11  13  13  14  10  14  13  12  15  10  12  15  12  11  14  12  12  15  11  12  14  12  11  15  12  13  13  11  13  14 
13  11  13  13  12  15  11  12 
Traceback (most recent call last):
  File "<pyshell#28>", line 1, in <module>
    PrintInColumns(Nidxdiffs[7][:729], 81)
  File "<pyshell#24>", line 4, in PrintInColumns
    print "%-*d" % (colwidth, a),
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/idlelib/PyShell.py", line 1356, in write
    return self.shell.write(s, self.tags)
KeyboardInterrupt
>>> PrintInColumns(Nidxdiffs[7][:729], 81, 2)
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13 13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13 14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14


>>> PrintInColumns(Nidxdiffs[8][:729], 81, 2)
18 14 18 17 16 20 15 16 18 16 15 20 16 16 19 14 16 20 16 14 20 16 17 19 13 19 17 17 15 17 19 16 19 14 16 20 16 14 20 16 16 20 13 16 20 16 15 18 16 19 17 15 17 18 18 14 18 18 16 20 13 16 20 16 15 18 16 16 20 15 16 19 16 14 20 16 18 17 15 17 19
17 15 17 17 16 20 15 16 19 16 14 20 16 16 19 15 16 20 16 13 20 16 17 19 13 19 17 18 14 18 18 16 19 15 16 20 16 13 20 16 16 20 13 16 20 16 15 19 16 18 18 14 18 17 19 13 19 17 16 20 13 16 20 16 15 19 16 16 20 14 16 19 16 15 20 16 17 17 15 17 19
17 15 17 18 16 20 14 16 19 16 15 20 16 16 18 15 16 20 16 13 20 16 18 18 14 18 18 17 15 17 19 16 18 15 16 20 16 13 20 16 16 20 14 16 20 16 14 19 16 19 17 15 17 17 19 13 19 17 16 20 14 16 20 16 14 19 16 16 20 15 16 18 16 15 20 16 17 18 14 18 18
18 14 18 17 16 20 15 16 18 16 15 20 16 16 19 14 16 20 16 14 20 16 17 19 13 19 17 17 15 17 19 16 19 14 16 20 16 14 20 16 16 20 13 16 20 16 15 18 16 19 17 15 17 18 18 14 18 18 16 20 13 16 20 16 15 18 16 16 20 15 16 19 16 14 20 16 18 17 15 17 19
17 15 17 17 16 20 15 16 19 16 14 20 16 16 19 15 16 20 16 13 20 16 17 19 13 19 17 18 14 18 18 16 19 15 16 20 16 13 20 16 16 20 13 16 20 16 15 19 16 18 18 14 18 17 19 13 19 17 16 20 13 16 20 16 15 19 16 16 20 14 16 19 16 15 20 16 17 17 15 17 19
17 15 17 18 16 20 14 16 19 16 15 20 16 16 18 15 16 20 16 13 20 16 18 18 14 18 18 17 15 17 19 16 18 15 16 20 16 13 20 16 16 20 14 16 20 16 14 19 16 19 17 15 17 17 19 13 19 17 16 20 14 16 20 16 14 19 16 16 20 15 16 18 16 15 20 16 17 18 14 18 18
18 14 18 17 16 20 15 16 18 16 15 20 16 16 19 14 16 20 16 14 20 16 17 19 13 19 17 17 15 17 19 16 19 14 16 20 16 14 20 16 16 20 13 16 20 16 15 18 16 19 17 15 17 18 18 14 18 18 16 20 13 16 20 16 15 18 16 16 20 15 16 19 16 14 20 16 18 17 15 17 19
17 15 17 17 16 20 15 16 19 16 14 20 16 16 19 15 16 20 16 13 20 16 17 19 13 19 17 18 14 18 18 16 19 15 16 20 16 13 20 16 16 20 13 16 20 16 15 19 16 18 18 14 18 17 19 13 19 17 16 20 13 16 20 16 15 19 16 16 20 14 16 19 16 15 20 16 17 17 15 17 19
17 15 17 18 16 20 14 16 19 16 15 20 16 16 18 15 16 20 16 13 20 16 18 18 14 18 18 17 15 17 19 16 18 15 16 20 16 13 20 16 16 20 14 16 20 16 14 19 16 19 17 15 17 17 19 13 19 17 16 20 14 16 20 16 14 19 16 16 20 15 16 18 16 15 20 16 17 18 14 18 18


>>> PrintInColumns(Nidxdiffs[8][:243], 27, 2)
18 14 18 17 16 20 15 16 18 16 15 20 16 16 19 14 16 20 16 14 20 16 17 19 13 19 17
17 15 17 19 16 19 14 16 20 16 14 20 16 16 20 13 16 20 16 15 18 16 19 17 15 17 18
18 14 18 18 16 20 13 16 20 16 15 18 16 16 20 15 16 19 16 14 20 16 18 17 15 17 19
17 15 17 17 16 20 15 16 19 16 14 20 16 16 19 15 16 20 16 13 20 16 17 19 13 19 17
18 14 18 18 16 19 15 16 20 16 13 20 16 16 20 13 16 20 16 15 19 16 18 18 14 18 17
19 13 19 17 16 20 13 16 20 16 15 19 16 16 20 14 16 19 16 15 20 16 17 17 15 17 19
17 15 17 18 16 20 14 16 19 16 15 20 16 16 18 15 16 20 16 13 20 16 18 18 14 18 18
17 15 17 19 16 18 15 16 20 16 13 20 16 16 20 14 16 20 16 14 19 16 19 17 15 17 17
19 13 19 17 16 20 14 16 20 16 14 19 16 16 20 15 16 18 16 15 20 16 17 18 14 18 18


>>> PrintInColumns(Nidxdiffs[8][:243], 9, 2)
18 14 18 17 16 20 15 16 18
16 15 20 16 16 19 14 16 20
16 14 20 16 17 19 13 19 17
17 15 17 19 16 19 14 16 20
16 14 20 16 16 20 13 16 20
16 15 18 16 19 17 15 17 18
18 14 18 18 16 20 13 16 20
16 15 18 16 16 20 15 16 19
16 14 20 16 18 17 15 17 19
17 15 17 17 16 20 15 16 19
16 14 20 16 16 19 15 16 20
16 13 20 16 17 19 13 19 17
18 14 18 18 16 19 15 16 20
16 13 20 16 16 20 13 16 20
16 15 19 16 18 18 14 18 17
19 13 19 17 16 20 13 16 20
16 15 19 16 16 20 14 16 19
16 15 20 16 17 17 15 17 19
17 15 17 18 16 20 14 16 19
16 15 20 16 16 18 15 16 20
16 13 20 16 18 18 14 18 18
17 15 17 19 16 18 15 16 20
16 13 20 16 16 20 14 16 20
16 14 19 16 19 17 15 17 17
19 13 19 17 16 20 14 16 20
16 14 19 16 16 20 15 16 18
16 15 20 16 17 18 14 18 18


>>> PrintInColumns(Nidxdiffs[7][:243], 27, 2)
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14 12 11 15 12 12 14 11 12 15 12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15 12 10 15 12 12 15 10 12 15 12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15 12 11 14 12 12 15 11 12 14 12 11 15 12 13 13 11 13 14


>>> PrintInColumns(Nidxdiffs[7][:243], 9, 2)
13 11 13 13 12 15 11 12 14
12 11 15 12 12 14 11 12 15
12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15
12 10 15 12 12 15 10 12 15
12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15
12 11 14 12 12 15 11 12 14
12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14
12 11 15 12 12 14 11 12 15
12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15
12 10 15 12 12 15 10 12 15
12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15
12 11 14 12 12 15 11 12 14
12 11 15 12 13 13 11 13 14
13 11 13 13 12 15 11 12 14
12 11 15 12 12 14 11 12 15
12 10 15 12 13 14 10 14 13
13 11 13 14 12 14 11 12 15
12 10 15 12 12 15 10 12 15
12 11 14 12 14 13 11 13 13
14 10 14 13 12 15 10 12 15
12 11 14 12 12 15 11 12 14
12 11 15 12 13 13 11 13 14


>>> a
[87103]
>>> a = range(10)
>>> a[:12]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> def CheckPeriod(seq, pdlen):
    if len(seq) < 2*pdlen:
        print "Warning: sequence is shorter than 2 periods."
    period = seq[:pdlen]
    for i in xrange(pdlen, len(seq)):
        if seq[i] != period[i % pdlen]:
            return False
    return True

>>> CheckPeriod(Nidxdiffs[3], 3)
True
>>> CheckPeriod(Nidxdiffs[4], 3)
True
>>> CheckPeriod(Nidxdiffs[5], 3)
False
>>> CheckPeriod(Nidxdiffs[3], 1)
True
>>> CheckPeriod(Nidxdiffs[5], 9)
True
>>> CheckPeriod(Nidxdiffs[6], 81)
True
>>> CheckPeriod(Nidxdiffs[6], 9)
False
>>> PrintInColumns(Nidxdiffs[5][:27], 9)
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  


>>> PrintInColumns(Nidxdiffs[5][:81], 9)
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  
7   6   8   7   7   8   6   7   8  


>>> PrintInColumns(Nidxdiffs[4][:27], 3)
5   5   6  
5   5   6  
5   5   6  
5   5   6  
5   5   6  
5   5   6  
5   5   6  
5   5   6  
5   5   6  


>>> PrintInColumns(Nidxdiffs[6][:243], 27)
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 
10  8   10  10  9   11  8   9   11  9   8   11  9   9   11  8   9   11  9   8   11  9   10  10  8   10  10 


>>> 3**27
7625597484987
>>> 3**7
2187
>>> 3**9
19683
>>> 3**10
59049
>>> 3**11
177147
>>> 3**10 * 2
118098
>>> leaders = makeleadersequence(120000)
Aborted: maxN needs to be increased!
>>> leaders = makeleadersequence(120000, 41)
>>> 3**13
1594323
>>> 3**12
531441
>>> _*2
1062882
>>> leaders = makeleadersequence(1000000, 45)
Aborted: maxN needs to be increased!
>>> leaders = makeleadersequence(1000000, 50)
>>> max(leaders)
48
>>> leaders = makeleadersequence(1000000, 48)
>>> Nindices = [FindAllIndices(i, leaders) for i in xrange(49)]
>>> map(len, Nindices)
[0, 0, 0, 250001, 187500, 140625, 105469, 79102, 59326, 44495, 33371, 25028, 18771, 14079, 10559, 7919, 5939, 4455, 3341, 2506, 1879, 1409, 1057, 793, 595, 446, 334, 251, 188, 141, 106, 79, 60, 45, 33, 25, 19, 14, 11, 8, 6, 4, 3, 3, 2, 1, 1, 1, 1]
>>> pow3 = [3**n for i in range(28)]

Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    pow3 = [3**n for i in range(28)]
NameError: name 'n' is not defined
>>> pow3 = [3**n for n in range(28)]
>>> pow3
[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467, 3486784401, 10460353203, 31381059609, 94143178827, 282429536481, 847288609443, 2541865828329, 7625597484987]
>>> for i in range(len(pow3)):
	print len(Nindices[i+3]), pow3[i]

250001 1
187500 3
140625 9
105469 27
79102 81
59326 243
44495 729
33371 2187
25028 6561
18771 19683
14079 59049
10559 177147
7919 531441
5939 1594323
4455 4782969
3341 14348907
2506 43046721
1879 129140163
1409 387420489
1057 1162261467
793 3486784401
595 10460353203
446 31381059609
334 94143178827
251 282429536481
188 847288609443
141 2541865828329
106 7625597484987
>>> for N in range(3,12):
	periodlen = 3**(N-3)
	result = CheckPeriod(Nidxdiffs[N], periodlen)
	print N, periodlen, result

3 1 True
4 3 True
5 9 True
6 27 True
7 81 True
8 243 True
9 729 True
Warning: sequence is shorter than 2 periods.
10 2187 True
Warning: sequence is shorter than 2 periods.
11 6561 True
>>> len(Nindices[10])
33371
>>> len(Nindices[11])
25028
>>> map(len, Nidxdiffs)
[0, 0, 0, 25000, 18749, 14062, 10546, 7909, 5932, 4449, 3336, 2502, 1876, 1407, 1055, 791, 593, 444, 333, 250, 187, 140, 105, 78, 58, 44, 32, 24, 18, 13, 10, 7, 5, 3, 2, 2, 1, 0, 0, 0, 0]
>>> Nidxdiffs = map(FirstDiffs, Nindices)
>>> firstindices = map(lambda x: x[0], Nindices[4:])
>>> len(firstindices)
45
>>> firstindices
[1, 2, 3, 5, 7, 10, 14, 19, 26, 35, 47, 63, 85, 114, 153, 205, 274, 366, 489, 653, 871, 1162, 1550, 2067, 2757, 3677, 4903, 6538, 8718, 11625, 15501, 20669, 27559, 36746, 48995, 65327, 87103, 116138, 154851, 206469, 275293, 367058, 489411, 652549, 870066]
>>> len(Nidxdiffs)
49
>>> for N in range(3,12):
	periodlen = 3**(N-3)
	result = CheckPeriod(Nidxdiffs[N], periodlen)
	print N, periodlen, result

3 1 True
4 3 True
5 9 True
6 27 True
7 81 True
8 243 True
9 729 True
10 2187 True
11 6561 True
>>> makefirstidxsequence(60)
[1, 2, 3, 5, 7, 10, 14, 19, 26, 35, 47, 63, 85, 114, 153, 205, 274, 366, 489, 653, 871, 1162, 1550, 2067, 2757, 3677, 4903, 6538, 8718, 11625, 15501, 20669, 27559, 36746, 48995, 65327, 87103, 116138, 154851, 206469, 275293, 367058, 489411, 652549, 870066, 1160089, 1546786, 2062382, 2749843, 3666458, 4888611, 6518149, 8690866, 11587822, 15450430, 20600574, 27467433]
>>> for N in range(4,12):
	periodlen = 3**(N-4)
	result = CheckPeriod(Nidxdiffs[N], periodlen)
	print N, periodlen, result

4 1 False
5 3 False
6 9 False
7 27 False
8 81 False
9 243 False
10 729 False
11 2187 False
>>> len(leaders)
1000001
>>> print leaders[:200]
[3, 4, 5, 6, 3, 7, 4, 8, 3, 5, 9, 4, 3, 6, 10, 5, 3, 4, 7, 11, 3, 6, 4, 5, 3, 8, 12, 4, 3, 7, 5, 6, 3, 4, 9, 13, 3, 5, 4, 8, 3, 6, 7, 4, 3, 5, 10, 14, 3, 4, 6, 5, 3, 9, 4, 7, 3, 8, 5, 4, 3, 6, 11, 15, 3, 4, 5, 7, 3, 6, 4, 10, 3, 5, 8, 4, 3, 9, 6, 5, 3, 4, 7, 12, 3, 16, 4, 5, 3, 6, 8, 4, 3, 7, 5, 11, 3, 4, 6, 9, 3, 5, 4, 10, 3, 7, 6, 4, 3, 5, 8, 13, 3, 4, 17, 5, 3, 6, 4, 7, 3, 9, 5, 4, 3, 8, 6, 12, 3, 4, 5, 7, 3, 10, 4, 6, 3, 5, 11, 4, 3, 8, 7, 5, 3, 4, 6, 9, 3, 14, 4, 5, 3, 18, 6, 4, 3, 7, 5, 8, 3, 4, 10, 6, 3, 5, 4, 9, 3, 7, 13, 4, 3, 5, 6, 8, 3, 4, 11, 5, 3, 7, 4, 6, 3, 12, 5, 4, 3, 9, 8, 6, 3, 4, 5, 7, 3, 10, 4, 15]
>>> FirstDiffs(makefirstidxsequence(40))
[1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 22, 29, 39, 52, 69, 92, 123, 164, 218, 291, 388, 517, 690, 920, 1226, 1635, 2180, 2907, 3876, 5168, 6890, 9187, 12249, 16332, 21776]
>>> FirstDiffs(FirstDiffs(makefirstidxsequence(40)))
[0, 1, 0, 1, 1, 1, 2, 2, 3, 4, 6, 7, 10, 13, 17, 23, 31, 41, 54, 73, 97, 129, 173, 230, 306, 409, 545, 727, 969, 1292, 1722, 2297, 3062, 4083, 5444]
>>> def makeA087165(length = 100):


return
  File "<pyshell#98>", line 5
    return
         ^
IndentationError: expected an indented block
>>> Math

Traceback (most recent call last):
  File "<pyshell#99>", line 1, in <module>
    Math
NameError: name 'Math' is not defined
>>> import Math

Traceback (most recent call last):
  File "<pyshell#100>", line 1, in <module>
    import Math
ImportError: No module named Math
>>> import math
>>> dir(math)
['__doc__', '__file__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> math.ceil(17/4.0)
5.0
>>> math.ceil(16/4.0)
4.0
>>> def makeA087165(length = 100):
    a = []
    for n in xrange(1, length+1):
        if n == 1%4:
            val = 1
        else:
            val = a[n - math.ceil(n/4.0)] + 1
        a.append(val)
    return a

>>> makeA087165()

Traceback (most recent call last):
  File "<pyshell#106>", line 1, in <module>
    makeA087165()
  File "<pyshell#105>", line 7, in makeA087165
    val = a[n - math.ceil(n/4.0)] + 1
TypeError: list indices must be integers, not float
>>> def makeA087165(length = 100):
    a = []
    for n in xrange(1, length+1):
        if n == 1%4:
            val = 1
        else:
            val = a[n - int(math.ceil(n/4.0))] + 1
        a.append(val)
    return a

>>> makeA087165()

Traceback (most recent call last):
  File "<pyshell#108>", line 1, in <module>
    makeA087165()
  File "<pyshell#107>", line 7, in makeA087165
    val = a[n - int(math.ceil(n/4.0))] + 1
IndexError: list index out of range
>>> def makeA087165(length = 100):
    a = []
    for n in xrange(1, length+1):
        if n == 1%4:
            val = 1
        else:
            val = a[n - int(math.ceil(n/4.0)) - 1] + 1
        a.append(val)
    return a

>>> makeA087165()
[1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]
