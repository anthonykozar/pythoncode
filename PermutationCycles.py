import operator

def PermutationToCycleNotation(permstr, firstpos = 1, incl1cycles = False, printcycles = False):
    permlist = map(int, list(permstr))
    permlen = len(permlist)
    output = ""
    # create an array with permlen elements initialized to False
    checkedvalues = [False] * permlen

    for i in range(firstpos, permlen+firstpos):
        idx = i - firstpos
        if not checkedvalues[idx]:
            # start a new cycle
            value = i
            cyclestr = ''
            looping = False
            while not looping:
                if checkedvalues[idx]:
                    # this value has already occurred in some cycle
                    # so we should be at the end of the cycle
                    if incl1cycles or len(cyclestr) > 1:
                        output += '(' + cyclestr + ')'
                    looping = True
                else:
                    # add and mark this value as checked
                    cyclestr += str(value)
                    checkedvalues[idx] = True
                    # get the image of value 
                    nextvalue = permlist[idx]
                    # prepare to check next value
                    value = nextvalue
                    idx = nextvalue - firstpos

    if output == '': output = '(1)'
    if printcycles: print output,
    return output

def PrintPermutationAndCycles0(permstr):
    print permstr, '  ', PermutationToCycleNotation(permstr, 0)

def PrintPermutationAndCycles1(permstr):
    print permstr, '  ', PermutationToCycleNotation(permstr, 1)

Zendo35766Has = [
    '123456789', '123456798', '213456789', '213654798', '214365879', '231564897',
    '312645978', '321654987', '927654381', '987654321'
]

Zendo35766HasNot = [
    '214356879', '214365897', '231456897', '231457869', '231564978', '234167859', '314592687'
]

def MapHas_HasNot(fn, has = Zendo35766Has, hasnot = Zendo35766HasNot):
    print 'HAS'
    print '-------'
    map(fn, has)
    print ''
    print 'HAS NOT'
    print '-------'
    map(fn, hasnot)

# The "profile" of a permutation is a sequence of signs (+/-) indicating
# whether it increases or decreases between each pair of digits.
# Eg. the profile of 12348765 is ++++---
def PrintPermutationProfile(permstr):
    permlist = map(int, list(permstr))
    outstr = ''
    for i in range(1, len(permlist)):
        if permlist[i] > permlist[i-1]:
            outstr += '+'
        else:
            outstr += '-'
    print permstr, '  ', outstr

def PrintPermutationComposedWith(permstr1, permstr2, firstpos = 1):
    print permstr1, '*', permstr2, "= ",
    print ComposePerms(permstr1, permstr2, firstpos)


# Find the composition of two permutations
def ComposePerms(permstr1, permstr2, firstpos = 1):
    plist1 = map(int, list(permstr1))
    plist2 = map(int, list(permstr2))
    permlen = len(plist1)
    if permlen != len(plist2):
        print "ComposePerms(): permutation lengths do not match!"
        return

    # compute an array that is the composition of plist1 * plist2
    plist3 = [plist2[ plist1[i] - firstpos ] for i in range(permlen)]
    # convert the result to a string
    return reduce(operator.add, map(str, list(plist3)))

def PrintAllCompositions(permarray):
    for perm1 in permarray:
        print perm1 + ' * ...'
        print '----------------'
        for perm2 in permarray:
            PrintPermutationAndCycles1(ComposePerms(perm1, perm2))
        print

# sequence of HAS NOT koans to compose to derive the HAS koan '18765432'
HASderivation = ['13245768','12348765', '18674523', '12347658', '12348765',
                 '13527486']

# perform a chain of multiple compositions showing each step of
# derivation of the result
def ShowCompositionReduction(permarray):
    perm1 = permarray[0]
    for i in range(1, len(permarray)):
        perm2 = permarray[i]
        result = ComposePerms(perm1, perm2)
        print perm1 + " * " + perm2 + " = " + result
        perm1 = result


BACKTRACE = ['15783264', '15784623', '17583624', '18653274',
             '18654723', '18765432']

# Calculate the subgroup generated by a given set of permutations
# (i.e. find the closure of the set under composition)
def GenerateSubgroup(permset):
    # make two copies of permset (using 2 equiv. methods)
    permsToCheck = permset[:]
    subgroup = list(permset)
    while (len(permsToCheck) > 0):
        print len(permsToCheck), len(subgroup)
        p1 = permsToCheck.pop(0)
        for p2 in subgroup:
            p1p2 = ComposePerms(p1, p2)
            # if p1p2 in BACKTRACE:
            #    print "Koan " + p1p2 + " = " + p1 + " * " + p2
            if p1p2 not in subgroup:
                subgroup.append(p1p2)
                permsToCheck.append(p1p2)
            # is this check redundant in all cases??
            p2p1 = ComposePerms(p2, p1)
            # if p2p1 in BACKTRACE:
            #    print "Koan " + p2p1 + " = " + p2 + " * " + p1
            if p2p1 not in subgroup:
                subgroup.append(p2p1)
                permsToCheck.append(p2p1)
    return subgroup

# Calculate the sum of how many places each digit in a
# permutation is shifted.  APPEARS TO ALWAYS BE ZERO!
def ShiftSum(permstr, printtable = False):
    permlist = map(int, list(permstr))
    permlen = len(permlist)
    shiftsum = 0
    
    for i in range(permlen):
        idx1 = i+1
        shift = idx1 - permlist[i]
        if printtable: print idx1, '  ', permlist[i], '  ', shift
        shiftsum += shift

    if printtable: print "Shift sum:", shiftsum
    return shiftsum

low6s = ['62345178', '16345278', '12645378', '12365478', '12346578']

# Make a list of all permutation strings that are a single 2-cycle.
def Make2Cycles(permsize):
    permlist = list()
    for i in range(1, permsize+1):
        for j in range(i+1, permsize+1):
            permstr = ''
            # build a string of the permutation elements
            for d in range(1, permsize+1):
                # swap i and j
                if d == i:
                    permstr += str(j)
                elif d == j:
                    permstr += str(i)
                else:
                    permstr += str(d)
            permlist.append(permstr)
            # print permstr
    return permlist

# Eg. TestXbeforeY('1324', '1', '2') --> True
def TestXbeforeY(permstr, X, Y):
    posX = permstr.find(X)
    posY = permstr.find(Y)
    return (posX < posY)

def CheckOrderOfPairs(permlist):
    numperms = len(permlist)
    if numperms > 0:
        # assume that all permutations have the same # of elements
        permsize = len(permlist[0])
    else: return

    for i in range(1, permsize+1):
        for j in range(1, permsize+1):
            if i == j: continue
            numTrue = 0
            numFalse = 0
            for perm in permlist:
                if TestXbeforeY(perm, str(i), str(j)):
                    numTrue += 1
                else:
                    numFalse += 1
            print '%d before %d:  %d/%d' % (i, j, numTrue, numperms)


# Check DiEvAl's guesses for Zendo #34858 of the form
# "AKHTBN iff there is an odd number of i,j pairs such that i is mapped to j and ij is
#  one of the pairs in set PAIRS."
PAIRS1 = [12,14,16,18,24,31,32,34,35,36,37,38,48,51,52,54,56,57,58,62,64,68,71,72,74,76,78,82]
PAIRS2 = [12,13,14,16,18,24,32,34,35,36,37,38,48,51,52,54,56,57,58,62,64,68,71,72,74,76,78,82]

def PrintDiEvAlCheck(permstr, pairs):
    matchingpairs = []
    for k in range(len(permstr)):
        i = k+1
        j = int(permstr[k])
        pair = i*10 + j
        if pair in pairs:
            matchingpairs.append(pair)
    oddmatches = ((len(matchingpairs) % 2) == 1)
    print permstr, '  ', str(oddmatches), matchingpairs
    return oddmatches

# Usage:
# MapHas_HasNot(lambda x: PrintDiEvAlCheck(x,PAIRS1))
# MapHas_HasNot(lambda x: PrintDiEvAlCheck(x,PAIRS2))

# execute when module is loaded
MapHas_HasNot(PrintPermutationAndCycles1)
#MapHas_HasNot(lambda x: PrintPermutationComposedWith(x,'17325648'))
# PrintAllCompositions(Zendo30228HasNot)

# HasNotSubgrp = GenerateSubgroup(Zendo30228HasNot)
# len(HasNotSubgrp)


##Zendo30034HasNot = ['0362581479', '0516273849', '1023456789', '1234567890',
##          '1247896530', '2345678901', '2468013579', '2580147369',
##          '2648013579', '3294567180', '3690124578', '3691470258',
##          '4170325869', '4321098765', '5432109876', '8527410963',
##          '8901234567', '9876543210']
##
##Zendo30034Has = ['0369258147', '0741852963', '2583690147', '3269581407',
##       '3269581470', '3692580147', '3692581470', '4261809375',
##       '4598123076', '7320695814', '7945620813']

##Zendo30228Has = [
##    '12345768', '12345876', '12346578', '12356478', '12365478', '12645378',
##    '13427568', '14328765', '15347628', '16345278', '18265743', '18765423',
##    '18765432', '21435678', '21436587', '23145768', '23415678',
##    '23451678', '23456178', '23456718', '23456781', '23465781',
##    '24681357', '28765431', '31245768', '31248765', '34125678',
##    '34567812', '41235678', '43125678', '43215678', '45678123', '51234678',
##    '53214768', '54321678', '54321876', '56781234', '57123468',
##    '61234578', '62345178', '64532187', '71234568', '81234567',
##    '81765432', '82134567', '86421735', '86741235', '87354621',
##    '87654213', '87654321'
##]
##
##Zendo30228HasNot = [
##    '12345678', '12345687', '12345786', '12347658', '12348675', '12348765',
##    '12354678', '12375648', '12385674', '12435678', '12543678',
##    '12745638', '12845673', '13245678', '13245768', '13456782',
##    '13527486', '14325678', '14365278', '15342678', '17345628',
##    '18345672', '18674523', '18764532', '21345678', '21346578',
##    '21348675', '23145678', '26345178', '26345187', '31245678',
##    '32145678', '32147658', '35142678', '42315678', '42318765',
##    '42368157', '52341678', '56341278', '58342671', '62381547',
##    '72134568', '72345618', '72354816', '82145673', '82345671',
##    '82371564'
##]

##Zendo34858Has = [
##    '12345687', '13425678', '14352687', '14352876', '15324678', '17823456',
##    '18234567', '18236457', '18726453', '21345678', '23145678', '31245678',
##    '32145678', '71234568'
##]
##
##Zendo34858HasNot = [
##    '12345678', '13572468', '14325687', '14325876', '15263748', '15324687',
##    '15368724', '18273645', '21345687', '87654321'
##]

##Zendo35682Generators = [
##    '21346578', '32147658', '42318675'
##]
##
##Zendo35682Has = [
##    '23146758', '31247568'
##]
##
##Zendo35682HasNot = [
##    '53187246'
##]

