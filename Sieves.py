def fiblist(limit):
    f = [1,1]
    i = 2
    last = 2
    while last <= limit:
        f.append(last)
        i += 1
        last = f[i-1] + f[i-2]
    return f

def sieve(ints, limit):
    no = set(ints)
    yes = []
    n = 1
    while n <= limit:
        if not n in no:
            yes.append(n)
            for k in ints:
                no.add(k*n)
        n += 1
    return yes

def upto(lim):
    return lambda n: n <= lim

# The sequence sf is not in OEIS.
fibs = fiblist(1000000)
sf = sieve(fibs, 1000000)
for x in [10**i for i in range(1,7)]:
    print len(filter(upto(x), sf))

# The sequence st is similar to A035262 in the OEIS. <http://oeis.org/A035262>
# There appears to be a pattern to members of st that are not in A035262 and vice versa.
t = [2**n-1 for n in range(1,11)]
st = sieve(t, 1000)
# d is A035262 up to 1000 as calculated by PARI. (see below)
d = [1, 2, 4, 5, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 32, 34, 36, 37, 38, 40, 44, 45, 46, 49, 50, 52, 55, 59, 64, 65, 67, 68, 72, 74, 76, 79, 80, 81, 83, 85, 88, 90, 92, 95, 98, 99, 100, 103, 104, 109, 110, 113, 115, 117, 118, 121, 125, 127, 128, 130, 134, 136, 143, 144, 148, 149, 152, 153, 158, 160, 162, 163, 166, 169, 170, 171, 176, 180, 184, 185, 187, 190, 191, 196, 197, 198, 199, 200, 206, 207, 208, 209, 218, 220, 221, 225, 226, 227, 229, 230, 233, 234, 236, 242, 245, 247, 250, 253, 254, 256, 257, 260, 263, 268, 272, 275, 286, 288, 289, 293, 295, 296, 298, 299, 304, 306, 307, 311, 313, 316, 317, 320, 323, 324, 325, 326, 331, 332, 333, 335, 337, 338, 340, 342, 349, 352, 360, 361, 367, 368, 370, 374, 379, 380, 382, 391, 392, 394, 395, 396, 397, 398, 400, 405, 407, 412, 414, 415, 416, 418, 421, 425, 433, 436, 437, 439, 440, 441, 442, 450, 452, 454, 458, 460, 461, 466, 468, 472, 475, 481, 484, 490, 494, 495, 499, 500, 503, 506, 508, 509, 512, 514, 515, 520, 521, 526, 529, 531, 536, 539, 541, 544, 545, 550, 557, 565, 569, 572, 575, 576, 578, 585, 586, 587, 590, 592, 596, 598, 599, 601, 603, 605, 607, 608, 612, 613, 614, 619, 622, 625, 626, 629, 632, 634, 635, 637, 640, 641, 643, 646, 647, 648, 649, 650, 652, 661, 662, 664, 666, 670, 673, 674, 676, 680, 683, 684, 691, 698, 703, 704, 709, 711, 715, 719, 720, 722, 727, 729, 733, 734, 736, 737, 739, 740, 745, 747, 748, 751, 758, 760, 764, 765, 767, 773, 782, 784, 787, 788, 790, 792, 794, 796, 800, 809, 810, 811, 814, 815, 821, 823, 824, 827, 828, 830, 832, 833, 836, 841, 842, 845, 850, 851, 853, 855, 857, 866, 869, 871, 872, 874, 877, 878, 880, 881, 882, 884, 887, 891, 900, 904, 908, 911, 913, 916, 919, 920, 922, 925, 927, 931, 932, 935, 936, 937, 941, 944, 947, 950, 953, 955, 961, 962, 968, 980, 981, 985, 988, 990, 991, 995, 998, 1000]

duniq = [b for b in d if not b in st]
stuniq = [b for b in st if not b in d]
mult21 = [x/21 for x in stuniq if x % 21 == 0]
# compare mult21 to d
[b for b in mult21 if b in d]
[b for b in mult21 if not b in d]
# is mult21 the union of d and (stuniq minus all multiples of 21) ?
# similarly for multiples of other elements of stuniq in stuniq

# elements of stuniq that are not multiples of other elements in stuniq.
notmult = []
for x in stuniq:
    ismult = False
    for y in notmult:
        if x%y == 0:
            ismult = True
            break
    if not ismult:
        notmult.append(x)
# notmult seems to be mostly primes. Non- prime elements include 21, 93, and 381 which are 3 times 7, 31, and 127.
'''
PARI code and output for A035262 up to 1000

? m=26; select(x -> x, direuler(p=2, 1001, 1/(1-(kronecker(m, p)*(X-X^2))-X)), 1)
%2 = Vecsmall(
[1, 2, 4, 5, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 32, 34, 36, 37, 38, 40, 44, 45, 46, 49, 50, 52, 55, 59, 64, 65, 67, 68, 72, 74, 76, 79, 80, 81, 83, 85, 88, 90, 92, 95, 98, 99, 100, 103, 104, 109, 110, 113, 115, 117, 118, 121, 125, 127, 128, 130, 134, 136, 143, 144, 148, 149, 152, 153, 158, 160, 162, 163, 166, 169, 170, 171, 176, 180, 184, 185, 187, 190, 191, 196, 197, 198, 199, 200, 206, 207, 208, 209, 218, 220, 221, 225, 226, 227, 229, 230, 233, 234, 236, 242, 245, 247, 250, 253, 254, 256, 257, 260, 263, 268, 272, 275, 286, 288, 289, 293, 295, 296, 298, 299, 304, 306, 307, 311, 313, 316, 317, 320, 323, 324, 325, 326, 331, 332, 333, 335, 337, 338, 340, 342, 349, 352, 360, 361, 367, 368, 370, 374, 379, 380, 382, 391, 392, 394, 395, 396, 397, 398, 400, 405, 407, 412, 414, 415, 416, 418, 421, 425, 433, 436, 437, 439, 440, 441, 442, 450, 452, 454, 458, 460, 461, 466, 468, 472, 475, 481, 484, 490, 494, 495, 499, 500, 503, 506, 508, 509, 512, 514, 515, 520, 521, 526, 529, 531, 536, 539, 541, 544, 545, 550, 557, 565, 569, 572, 575, 576, 578, 585, 586, 587, 590, 592, 596, 598, 599, 601, 603, 605, 607, 608, 612, 613, 614, 619, 622, 625, 626, 629, 632, 634, 635, 637, 640, 641, 643, 646, 647, 648, 649, 650, 652, 661, 662, 664, 666, 670, 673, 674, 676, 680, 683, 684, 691, 698, 703, 704, 709, 711, 715, 719, 720, 722, 727, 729, 733, 734, 736, 737, 739, 740, 745, 747, 748, 751, 758, 760, 764, 765, 767, 773, 782, 784, 787, 788, 790, 792, 794, 796, 800, 809, 810, 811, 814, 815, 821, 823, 824, 827, 828, 830, 832, 833, 836, 841, 842, 845, 850, 851, 853, 855, 857, 866, 869, 871, 872, 874, 877, 878, 880, 881, 882, 884, 887, 891, 900, 904, 908, 911, 913, 916, 919, 920, 922, 925, 927, 931, 932, 935, 936, 937, 941, 944, 947, 950, 953, 955, 961, 962, 968, 980, 981, 985, 988, 990, 991, 995, 998, 1000]
)
'''
